// const readlineSync = require('readline-sync');
const player = require('play-sound')((opts = {}));
const readlineSync = require('readline-sync');
const Hero = require('./game-models/Hero');
const Enemy = require('./game-models/Enemy');
const Boomerang = require('./game-models/Boomerang');
const View = require('./View');

const { User } = require('../db/models');

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã.

class Game {
  constructor({ trackLength }) {
    this.trackLength = trackLength;
    this.boomerang = new Boomerang(trackLength);
    this.hero = new Hero({
      position: 0,
      boomerang: this.boomerang,
      newPosition: undefined,
      scores: 0,
    });
    this.enemy = new Enemy(trackLength);
    this.enemy2 = new Enemy(trackLength);
    this.view = new View(this);
    this.track = [];
    this.track2 = [];
    this.regenerateTrack();
  }

  regenerateTrack() {
    // –°–±–æ—Ä–∫–∞ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ (–≥–µ—Ä–æ–π, –≤—Ä–∞–≥(–∏), –æ—Ä—É–∂–∏–µ)
    // –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö

    this.track = new Array(this.trackLength).fill('_');
    this.track[this.hero.position] = this.hero.skin;

    this.track = new Array(this.trackLength).fill(' ');

    this.track[this.enemy.position] = this.enemy.skin; 

    if (this.hero.position >= 0) {
      this.track[this.hero.position] = this.hero.skin;
    }

    if (this.hero.boomerang.position >= 0 && this.hero.boomerang.position < this.trackLength) {
      this.track[this.hero.boomerang.position] = this.hero.boomerang.skin;
    }

    this.track2 = new Array(this.trackLength).fill(' ');

    if (this.hero.newPosition >= 0) {
      this.track2[this.hero.newPosition] = this.hero.skin;
    }

    this.track2[this.enemy2.newPosition] = this.enemy2.skin;

    if (
      this.hero.boomerang.newPosition >= 0 &&
      this.hero.boomerang.newPosition < this.trackLength
    ) {
      this.track2[this.hero.boomerang.newPosition] = this.hero.boomerang.skin;
    }
  }

  play() {
    // –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ñ–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –∏–º—è –∏–≥—Ä–æ–∫–∞
    this.hero.name = readlineSync.question('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ì–µ—Ä–æ—è!\n–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è: ');
    process.stdin.resume();
    if (!this.hero.name) {
      this.hero.name = 'Anonimus';
    }

    setInterval(() => {
      this.handleCollisions();
      this.regenerateTrack();

      // –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–≤–∏–∂–µ–Ω–∏—è
      this.enemy.moveLeft();
      this.enemy2.moveLeft();

      // –ï—Å–ª–∏ –≤—Ä–∞–≥ –¥–æ—Å—Ç–∏–≥ –∫—Ä–∞—è —Ç—Ä–µ–∫–∞, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ
      if (this.enemy.position < 0) {
        this.enemy = new Enemy(this.trackLength);
      }
      if (this.enemy2.newPosition < 0) {
        this.enemy2 = new Enemy(this.trackLength);
      }

      this.view.render(this.track);
    }, 50);
  }

  // –∑–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –ë–î
  async dieHero() {
    const user = await User.findOrCreate({
      where: { name: this.hero.name },
      defaults: { score: this.hero.scores },
      logging: false,
    });
    // if (user[0].score <= this.hero.scores) {
    //   this.hero.bigscore = this.hero.scores;
    //   await User.update(
    //     { score: this.hero.scores },
    //     { where: { name: this.hero.name } },
    //     { logging: false }
    //   );
    // } else {
    //   this.hero.bigscore = user[0].score;
    //   await User.update(
    //     { score: this.hero.bigscore },
    //     { where: { name: this.hero.name } },
    //     { logging: false }
    //   );
    // }
  }

  async handleCollisions() {
    if (
      (this.hero.position >= this.enemy.position && this.hero.position - this.enemy.position < 2) ||
      (this.hero.newPosition >= this.enemy2.newPosition &&
        this.hero.newPosition - this.enemy2.newPosition < 2)
    ) {
      this.hero.lifesCount -= 1;

      if (this.hero.lifesCount === 2) {
        this.hero.lifes = '–ñ–∏–∑–Ω–∏: üíôüíôüóø';
        player.play('./src/sounds/death.mp3');
        this.enemy.position = 27;
      }
      if (this.hero.lifesCount === 1) {
        this.hero.lifes = '–ñ–∏–∑–Ω–∏: üíôüóøüóø';

        this.enemy.position = 25;
      }
      if (this.hero.lifesCount === 0) {
        this.hero.lifes = '–ñ–∏–∑–Ω–∏: üóøüóøüóø';
        player.play('./src/sounds/death.mp3');
        await this.dieHero();
        this.hero.die();
      }
    }
    // –±—É–º–µ—Ä–∞–Ω–≥ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Å –≤—Ä–∞–≥–æ–º
    if (this.boomerang.position >= this.enemy.position) {
      this.enemy.die();
      player.play('./src/sounds/brue.mp3');
      this.hero.scores += 1;
      // –æ–±–Ω—É–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Ä–∞–≥–∞
      this.boomerang.position = undefined;
      this.enemy = new Enemy(this.trackLength); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞
    }

    if (this.boomerang.newPosition >= this.enemy2.newPosition) {
      player.play('./src/sounds/brue.mp3');
      this.enemy2.die();
      this.hero.scores += 1;
      this.boomerang.newPosition = undefined;
      this.enemy2 = new Enemy(this.trackLength);
    }
  }
}

module.exports = Game;
